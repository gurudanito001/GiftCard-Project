// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}



datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model User {
  id              String            @id @default(uuid())
  firstName       String
  lastName        String
  avater          String?
  email           String            @unique
  username        String?           @unique
  showBalance     Boolean           @default(false)
  password        String?    
  role            Role              @default(USER)    
  email_confirmed Boolean           @default(false)
  offers          Offer[]
  Buyer           Trade[]           @relation("Buyer")
  Seller          Trade[]           @relation("Seller")
  Benefactor      Transaction[]     @relation("Benefactor")
  Beneficiary     Transaction[]     @relation("Beneficiary")
  Sender          Notification[]    @relation("Sender")
  Receiver        Notification[]    @relation("Receiver")
  wallet          Wallet?
  escrow          Escrow[]
  bankAccounts    BankAccount[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Offer {
  id              String            @id @default(uuid())
  user            User              @relation(fields: [userId], references: [id]) 
  userId          String
  cardName        String    
  valueInUSD      String
  price           String 
  category        OfferCategory     @default(MERCHANT)
  Location        String?
  trades          Trade[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Trade {
  id              String            @id @default(uuid())
  buyer           User              @relation("Buyer", fields: [buyerId], references: [id]) 
  buyerId         String
  seller          User              @relation("Seller", fields: [sellerId], references: [id]) 
  sellerId        String
  cardName        String
  valueInUSD      String
  price           String  
  offer           Offer             @relation(fields: [offerId], references: [id]) 
  offerId         String
  transaction     Transaction?
  escrow          Escrow?
  status          TradeStatus       @default(PENDING)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Transaction {
  id              String            @id @default(uuid())
  benefactor      User              @relation("Benefactor", fields: [benefactorId], references: [id]) 
  benefactorId    String
  beneficiary     User              @relation("Beneficiary", fields: [beneficiaryId], references: [id]) 
  beneficiaryId   String
  amount          String
  trade           Trade?            @relation(fields: [tradeId], references: [id]) 
  tradeId         String?           @unique
  type            TransactionType   @default(CREDIT)
  category        String
  status          TransactionStatus @default(PENDING )
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model BankAccount {
  id              String            @id @default(uuid())
  user            User              @relation(fields: [userId], references: [id]) 
  userId          String
  bankName        String
  accountName     String
  accountNumber   String  
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Notification {
  id              String            @id @default(uuid())
  receiver        User              @relation("Receiver", fields: [receiverId], references: [id]) 
  receiverId      String
  sender          User?             @relation("Sender", fields: [senderId], references: [id]) 
  senderId        String
  viewed          Boolean           @default(false)
  message         String    
  url             String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Wallet {
  id                String          @id @default(uuid())
  user              User            @relation(fields: [userId], references: [id]) 
  userId            String          @unique
  currency          String          @default("NGN")
  currentBalance    String          @default("0.00")
  availableBalance  String          @default("0.00")
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model Escrow {
  id                String          @id @default(uuid())
  user              User            @relation(fields: [userId], references: [id]) 
  userId            String
  trade             Trade           @relation(fields: [tradeId], references: [id]) 
  tradeId           String          @unique
  amount            String
  status            EscrowStatus   @default(PENDING)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime        @updatedAt
}

enum Role {
  USER
  ADMIN
}
enum TransactionType {
  DEBIT
  CREDIT
}

enum TransactionStatus {
  PENDING
  FAILED
  SUCCESSFUL
}

enum EscrowStatus {
  PENDING
  RETURNED
  DISBURSED
}

enum TradeStatus {
  PENDING
  ACCEPTED
  SUCCESSFUL
  DISCONTINUED
  CANCELLED
}

enum OfferCategory {
  MERCHANT 
  SELLER
}